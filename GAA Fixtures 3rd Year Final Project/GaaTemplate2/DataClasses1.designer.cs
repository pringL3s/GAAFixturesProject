#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GaaTemplate2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GAAFixtures")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeamTbl(TeamTbl instance);
    partial void UpdateTeamTbl(TeamTbl instance);
    partial void DeleteTeamTbl(TeamTbl instance);
    partial void InsertUserTbl(UserTbl instance);
    partial void UpdateUserTbl(UserTbl instance);
    partial void DeleteUserTbl(UserTbl instance);
    partial void InsertCompetitionTbl(CompetitionTbl instance);
    partial void UpdateCompetitionTbl(CompetitionTbl instance);
    partial void DeleteCompetitionTbl(CompetitionTbl instance);
    partial void InsertForumTbl(ForumTbl instance);
    partial void UpdateForumTbl(ForumTbl instance);
    partial void DeleteForumTbl(ForumTbl instance);
    partial void InsertClubTbl(ClubTbl instance);
    partial void UpdateClubTbl(ClubTbl instance);
    partial void DeleteClubTbl(ClubTbl instance);
    partial void InsertFixturesMatchesTbl(FixturesMatchesTbl instance);
    partial void UpdateFixturesMatchesTbl(FixturesMatchesTbl instance);
    partial void DeleteFixturesMatchesTbl(FixturesMatchesTbl instance);
    partial void InsertLeagueTbl(LeagueTbl instance);
    partial void UpdateLeagueTbl(LeagueTbl instance);
    partial void DeleteLeagueTbl(LeagueTbl instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TeamTbl> TeamTbls
		{
			get
			{
				return this.GetTable<TeamTbl>();
			}
		}
		
		public System.Data.Linq.Table<UserTbl> UserTbls
		{
			get
			{
				return this.GetTable<UserTbl>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionTbl> CompetitionTbls
		{
			get
			{
				return this.GetTable<CompetitionTbl>();
			}
		}
		
		public System.Data.Linq.Table<ForumTbl> ForumTbls
		{
			get
			{
				return this.GetTable<ForumTbl>();
			}
		}
		
		public System.Data.Linq.Table<ClubTbl> ClubTbls
		{
			get
			{
				return this.GetTable<ClubTbl>();
			}
		}
		
		public System.Data.Linq.Table<FixturesMatchesTbl> FixturesMatchesTbls
		{
			get
			{
				return this.GetTable<FixturesMatchesTbl>();
			}
		}
		
		public System.Data.Linq.Table<LeagueTbl> LeagueTbls
		{
			get
			{
				return this.GetTable<LeagueTbl>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamTbl")]
	public partial class TeamTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _ClubID;
		
		private string _TeamName;
		
		private string _TeamMngr;
		
		private EntitySet<LeagueTbl> _LeagueTbls;
		
		private EntityRef<ClubTbl> _ClubTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnClubIDChanging(int value);
    partial void OnClubIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamMngrChanging(string value);
    partial void OnTeamMngrChanged();
    #endregion
		
		public TeamTbl()
		{
			this._LeagueTbls = new EntitySet<LeagueTbl>(new Action<LeagueTbl>(this.attach_LeagueTbls), new Action<LeagueTbl>(this.detach_LeagueTbls));
			this._ClubTbl = default(EntityRef<ClubTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubID", DbType="Int NOT NULL")]
		public int ClubID
		{
			get
			{
				return this._ClubID;
			}
			set
			{
				if ((this._ClubID != value))
				{
					if (this._ClubTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIDChanging(value);
					this.SendPropertyChanging();
					this._ClubID = value;
					this.SendPropertyChanged("ClubID");
					this.OnClubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamMngr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamMngr
		{
			get
			{
				return this._TeamMngr;
			}
			set
			{
				if ((this._TeamMngr != value))
				{
					this.OnTeamMngrChanging(value);
					this.SendPropertyChanging();
					this._TeamMngr = value;
					this.SendPropertyChanged("TeamMngr");
					this.OnTeamMngrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamTbl_LeagueTbl", Storage="_LeagueTbls", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<LeagueTbl> LeagueTbls
		{
			get
			{
				return this._LeagueTbls;
			}
			set
			{
				this._LeagueTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClubTbl_TeamTbl", Storage="_ClubTbl", ThisKey="ClubID", OtherKey="ClubID", IsForeignKey=true)]
		public ClubTbl ClubTbl
		{
			get
			{
				return this._ClubTbl.Entity;
			}
			set
			{
				ClubTbl previousValue = this._ClubTbl.Entity;
				if (((previousValue != value) 
							|| (this._ClubTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClubTbl.Entity = null;
						previousValue.TeamTbls.Remove(this);
					}
					this._ClubTbl.Entity = value;
					if ((value != null))
					{
						value.TeamTbls.Add(this);
						this._ClubID = value.ClubID;
					}
					else
					{
						this._ClubID = default(int);
					}
					this.SendPropertyChanged("ClubTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueTbls(LeagueTbl entity)
		{
			this.SendPropertyChanging();
			entity.TeamTbl = this;
		}
		
		private void detach_LeagueTbls(LeagueTbl entity)
		{
			this.SendPropertyChanging();
			entity.TeamTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTbl")]
	public partial class UserTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegID;
		
		private string _Name;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<int> _AdminCap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegIDChanging(int value);
    partial void OnRegIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAdminCapChanging(System.Nullable<int> value);
    partial void OnAdminCapChanged();
    #endregion
		
		public UserTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegID
		{
			get
			{
				return this._RegID;
			}
			set
			{
				if ((this._RegID != value))
				{
					this.OnRegIDChanging(value);
					this.SendPropertyChanging();
					this._RegID = value;
					this.SendPropertyChanged("RegID");
					this.OnRegIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminCap", DbType="Int")]
		public System.Nullable<int> AdminCap
		{
			get
			{
				return this._AdminCap;
			}
			set
			{
				if ((this._AdminCap != value))
				{
					this.OnAdminCapChanging(value);
					this.SendPropertyChanging();
					this._AdminCap = value;
					this.SendPropertyChanged("AdminCap");
					this.OnAdminCapChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionTbl")]
	public partial class CompetitionTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionID;
		
		private System.DateTime _CompDate;
		
		private string _CompName;
		
		private string _CompDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnCompDateChanging(System.DateTime value);
    partial void OnCompDateChanged();
    partial void OnCompNameChanging(string value);
    partial void OnCompNameChanged();
    partial void OnCompDescriptionChanging(string value);
    partial void OnCompDescriptionChanged();
    #endregion
		
		public CompetitionTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompDate", DbType="DateTime NOT NULL")]
		public System.DateTime CompDate
		{
			get
			{
				return this._CompDate;
			}
			set
			{
				if ((this._CompDate != value))
				{
					this.OnCompDateChanging(value);
					this.SendPropertyChanging();
					this._CompDate = value;
					this.SendPropertyChanged("CompDate");
					this.OnCompDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CompName
		{
			get
			{
				return this._CompName;
			}
			set
			{
				if ((this._CompName != value))
				{
					this.OnCompNameChanging(value);
					this.SendPropertyChanging();
					this._CompName = value;
					this.SendPropertyChanged("CompName");
					this.OnCompNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompDescription", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CompDescription
		{
			get
			{
				return this._CompDescription;
			}
			set
			{
				if ((this._CompDescription != value))
				{
					this.OnCompDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CompDescription = value;
					this.SendPropertyChanged("CompDescription");
					this.OnCompDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumTbl")]
	public partial class ForumTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumID;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _ArticleID;
		
		private string _Title;
		
		private string _UserName;
		
		private string _UserEmail;
		
		private string _Description;
		
		private System.Nullable<int> _Indent;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private string _UserProfile;
		
		private System.Nullable<byte> _CommentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIDChanging(int value);
    partial void OnForumIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnArticleIDChanging(System.Nullable<int> value);
    partial void OnArticleIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIndentChanging(System.Nullable<int> value);
    partial void OnIndentChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnUserProfileChanging(string value);
    partial void OnUserProfileChanged();
    partial void OnCommentTypeChanging(System.Nullable<byte> value);
    partial void OnCommentTypeChanged();
    #endregion
		
		public ForumTbl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int")]
		public System.Nullable<int> ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(50)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Indent", DbType="Int")]
		public System.Nullable<int> Indent
		{
			get
			{
				return this._Indent;
			}
			set
			{
				if ((this._Indent != value))
				{
					this.OnIndentChanging(value);
					this.SendPropertyChanging();
					this._Indent = value;
					this.SendPropertyChanged("Indent");
					this.OnIndentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfile", DbType="NVarChar(50)")]
		public string UserProfile
		{
			get
			{
				return this._UserProfile;
			}
			set
			{
				if ((this._UserProfile != value))
				{
					this.OnUserProfileChanging(value);
					this.SendPropertyChanging();
					this._UserProfile = value;
					this.SendPropertyChanged("UserProfile");
					this.OnUserProfileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentType", DbType="TinyInt")]
		public System.Nullable<byte> CommentType
		{
			get
			{
				return this._CommentType;
			}
			set
			{
				if ((this._CommentType != value))
				{
					this.OnCommentTypeChanging(value);
					this.SendPropertyChanging();
					this._CommentType = value;
					this.SendPropertyChanged("CommentType");
					this.OnCommentTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClubTbl")]
	public partial class ClubTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClubID;
		
		private string _ClubName;
		
		private string _ClubPitch;
		
		private string _ClubSec;
		
		private int _TelNo;
		
		private string _Email;
		
		private EntitySet<TeamTbl> _TeamTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClubIDChanging(int value);
    partial void OnClubIDChanged();
    partial void OnClubNameChanging(string value);
    partial void OnClubNameChanged();
    partial void OnClubPitchChanging(string value);
    partial void OnClubPitchChanged();
    partial void OnClubSecChanging(string value);
    partial void OnClubSecChanged();
    partial void OnTelNoChanging(int value);
    partial void OnTelNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public ClubTbl()
		{
			this._TeamTbls = new EntitySet<TeamTbl>(new Action<TeamTbl>(this.attach_TeamTbls), new Action<TeamTbl>(this.detach_TeamTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClubID
		{
			get
			{
				return this._ClubID;
			}
			set
			{
				if ((this._ClubID != value))
				{
					this.OnClubIDChanging(value);
					this.SendPropertyChanging();
					this._ClubID = value;
					this.SendPropertyChanged("ClubID");
					this.OnClubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubName
		{
			get
			{
				return this._ClubName;
			}
			set
			{
				if ((this._ClubName != value))
				{
					this.OnClubNameChanging(value);
					this.SendPropertyChanging();
					this._ClubName = value;
					this.SendPropertyChanged("ClubName");
					this.OnClubNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubPitch", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubPitch
		{
			get
			{
				return this._ClubPitch;
			}
			set
			{
				if ((this._ClubPitch != value))
				{
					this.OnClubPitchChanging(value);
					this.SendPropertyChanging();
					this._ClubPitch = value;
					this.SendPropertyChanged("ClubPitch");
					this.OnClubPitchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubSec", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClubSec
		{
			get
			{
				return this._ClubSec;
			}
			set
			{
				if ((this._ClubSec != value))
				{
					this.OnClubSecChanging(value);
					this.SendPropertyChanging();
					this._ClubSec = value;
					this.SendPropertyChanged("ClubSec");
					this.OnClubSecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelNo", DbType="Int NOT NULL")]
		public int TelNo
		{
			get
			{
				return this._TelNo;
			}
			set
			{
				if ((this._TelNo != value))
				{
					this.OnTelNoChanging(value);
					this.SendPropertyChanging();
					this._TelNo = value;
					this.SendPropertyChanged("TelNo");
					this.OnTelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClubTbl_TeamTbl", Storage="_TeamTbls", ThisKey="ClubID", OtherKey="ClubID")]
		public EntitySet<TeamTbl> TeamTbls
		{
			get
			{
				return this._TeamTbls;
			}
			set
			{
				this._TeamTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamTbls(TeamTbl entity)
		{
			this.SendPropertyChanging();
			entity.ClubTbl = this;
		}
		
		private void detach_TeamTbls(TeamTbl entity)
		{
			this.SendPropertyChanging();
			entity.ClubTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixturesMatchesTbl")]
	public partial class FixturesMatchesTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FixtureID;
		
		private int _CompetitionID;
		
		private int _LeagueID;
		
		private string _Team1ID;
		
		private string _Team2ID;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<byte> _ScoreTeam1;
		
		private System.Nullable<byte> _ScoreTeam2;
		
		private System.Nullable<byte> _Goal1;
		
		private System.Nullable<byte> _Goal2;
		
		private System.Nullable<byte> _Points1;
		
		private System.Nullable<byte> _Points2;
		
		private EntityRef<LeagueTbl> _LeagueTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFixtureIDChanging(int value);
    partial void OnFixtureIDChanged();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnTeam1IDChanging(string value);
    partial void OnTeam1IDChanged();
    partial void OnTeam2IDChanging(string value);
    partial void OnTeam2IDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnScoreTeam1Changing(System.Nullable<byte> value);
    partial void OnScoreTeam1Changed();
    partial void OnScoreTeam2Changing(System.Nullable<byte> value);
    partial void OnScoreTeam2Changed();
    partial void OnGoal1Changing(System.Nullable<byte> value);
    partial void OnGoal1Changed();
    partial void OnGoal2Changing(System.Nullable<byte> value);
    partial void OnGoal2Changed();
    partial void OnPoints1Changing(System.Nullable<byte> value);
    partial void OnPoints1Changed();
    partial void OnPoints2Changing(System.Nullable<byte> value);
    partial void OnPoints2Changed();
    #endregion
		
		public FixturesMatchesTbl()
		{
			this._LeagueTbl = default(EntityRef<LeagueTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixtureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FixtureID
		{
			get
			{
				return this._FixtureID;
			}
			set
			{
				if ((this._FixtureID != value))
				{
					this.OnFixtureIDChanging(value);
					this.SendPropertyChanging();
					this._FixtureID = value;
					this.SendPropertyChanged("FixtureID");
					this.OnFixtureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", DbType="Int NOT NULL")]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._LeagueTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team1ID
		{
			get
			{
				return this._Team1ID;
			}
			set
			{
				if ((this._Team1ID != value))
				{
					this.OnTeam1IDChanging(value);
					this.SendPropertyChanging();
					this._Team1ID = value;
					this.SendPropertyChanged("Team1ID");
					this.OnTeam1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Team2ID
		{
			get
			{
				return this._Team2ID;
			}
			set
			{
				if ((this._Team2ID != value))
				{
					this.OnTeam2IDChanging(value);
					this.SendPropertyChanging();
					this._Team2ID = value;
					this.SendPropertyChanged("Team2ID");
					this.OnTeam2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreTeam1", DbType="TinyInt")]
		public System.Nullable<byte> ScoreTeam1
		{
			get
			{
				return this._ScoreTeam1;
			}
			set
			{
				if ((this._ScoreTeam1 != value))
				{
					this.OnScoreTeam1Changing(value);
					this.SendPropertyChanging();
					this._ScoreTeam1 = value;
					this.SendPropertyChanged("ScoreTeam1");
					this.OnScoreTeam1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreTeam2", DbType="TinyInt")]
		public System.Nullable<byte> ScoreTeam2
		{
			get
			{
				return this._ScoreTeam2;
			}
			set
			{
				if ((this._ScoreTeam2 != value))
				{
					this.OnScoreTeam2Changing(value);
					this.SendPropertyChanging();
					this._ScoreTeam2 = value;
					this.SendPropertyChanged("ScoreTeam2");
					this.OnScoreTeam2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goal1", DbType="TinyInt")]
		public System.Nullable<byte> Goal1
		{
			get
			{
				return this._Goal1;
			}
			set
			{
				if ((this._Goal1 != value))
				{
					this.OnGoal1Changing(value);
					this.SendPropertyChanging();
					this._Goal1 = value;
					this.SendPropertyChanged("Goal1");
					this.OnGoal1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goal2", DbType="TinyInt")]
		public System.Nullable<byte> Goal2
		{
			get
			{
				return this._Goal2;
			}
			set
			{
				if ((this._Goal2 != value))
				{
					this.OnGoal2Changing(value);
					this.SendPropertyChanging();
					this._Goal2 = value;
					this.SendPropertyChanged("Goal2");
					this.OnGoal2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points1", DbType="TinyInt")]
		public System.Nullable<byte> Points1
		{
			get
			{
				return this._Points1;
			}
			set
			{
				if ((this._Points1 != value))
				{
					this.OnPoints1Changing(value);
					this.SendPropertyChanging();
					this._Points1 = value;
					this.SendPropertyChanged("Points1");
					this.OnPoints1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points2", DbType="TinyInt")]
		public System.Nullable<byte> Points2
		{
			get
			{
				return this._Points2;
			}
			set
			{
				if ((this._Points2 != value))
				{
					this.OnPoints2Changing(value);
					this.SendPropertyChanging();
					this._Points2 = value;
					this.SendPropertyChanged("Points2");
					this.OnPoints2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueTbl_FixturesMatchesTbl", Storage="_LeagueTbl", ThisKey="LeagueID", OtherKey="LeagueID", IsForeignKey=true)]
		public LeagueTbl LeagueTbl
		{
			get
			{
				return this._LeagueTbl.Entity;
			}
			set
			{
				LeagueTbl previousValue = this._LeagueTbl.Entity;
				if (((previousValue != value) 
							|| (this._LeagueTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueTbl.Entity = null;
						previousValue.FixturesMatchesTbls.Remove(this);
					}
					this._LeagueTbl.Entity = value;
					if ((value != null))
					{
						value.FixturesMatchesTbls.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("LeagueTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueTbl")]
	public partial class LeagueTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private int _TeamID;
		
		private string _LeagueName;
		
		private string _TeamName;
		
		private string _LeagueType;
		
		private string _ChoosenTeams;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _Time;
		
		private int _PlayedGames;
		
		private int _Won;
		
		private int _Draw;
		
		private int _Lost;
		
		private int _PtsFor;
		
		private int _PtsAgainst;
		
		private int _PtsGoalDiff;
		
		private int _Pts;
		
		private int _RankingPosition;
		
		private EntitySet<FixturesMatchesTbl> _FixturesMatchesTbls;
		
		private EntityRef<TeamTbl> _TeamTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnLeagueNameChanging(string value);
    partial void OnLeagueNameChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnLeagueTypeChanging(string value);
    partial void OnLeagueTypeChanged();
    partial void OnChoosenTeamsChanging(string value);
    partial void OnChoosenTeamsChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    partial void OnPlayedGamesChanging(int value);
    partial void OnPlayedGamesChanged();
    partial void OnWonChanging(int value);
    partial void OnWonChanged();
    partial void OnDrawChanging(int value);
    partial void OnDrawChanged();
    partial void OnLostChanging(int value);
    partial void OnLostChanged();
    partial void OnPtsForChanging(int value);
    partial void OnPtsForChanged();
    partial void OnPtsAgainstChanging(int value);
    partial void OnPtsAgainstChanged();
    partial void OnPtsGoalDiffChanging(int value);
    partial void OnPtsGoalDiffChanged();
    partial void OnPtsChanging(int value);
    partial void OnPtsChanged();
    partial void OnRankingPositionChanging(int value);
    partial void OnRankingPositionChanged();
    #endregion
		
		public LeagueTbl()
		{
			this._FixturesMatchesTbls = new EntitySet<FixturesMatchesTbl>(new Action<FixturesMatchesTbl>(this.attach_FixturesMatchesTbls), new Action<FixturesMatchesTbl>(this.detach_FixturesMatchesTbls));
			this._TeamTbl = default(EntityRef<TeamTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._TeamTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueName", DbType="NVarChar(50)")]
		public string LeagueName
		{
			get
			{
				return this._LeagueName;
			}
			set
			{
				if ((this._LeagueName != value))
				{
					this.OnLeagueNameChanging(value);
					this.SendPropertyChanging();
					this._LeagueName = value;
					this.SendPropertyChanged("LeagueName");
					this.OnLeagueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LeagueType
		{
			get
			{
				return this._LeagueType;
			}
			set
			{
				if ((this._LeagueType != value))
				{
					this.OnLeagueTypeChanging(value);
					this.SendPropertyChanging();
					this._LeagueType = value;
					this.SendPropertyChanged("LeagueType");
					this.OnLeagueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoosenTeams", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ChoosenTeams
		{
			get
			{
				return this._ChoosenTeams;
			}
			set
			{
				if ((this._ChoosenTeams != value))
				{
					this.OnChoosenTeamsChanging(value);
					this.SendPropertyChanging();
					this._ChoosenTeams = value;
					this.SendPropertyChanged("ChoosenTeams");
					this.OnChoosenTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayedGames", DbType="Int NOT NULL")]
		public int PlayedGames
		{
			get
			{
				return this._PlayedGames;
			}
			set
			{
				if ((this._PlayedGames != value))
				{
					this.OnPlayedGamesChanging(value);
					this.SendPropertyChanging();
					this._PlayedGames = value;
					this.SendPropertyChanged("PlayedGames");
					this.OnPlayedGamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Won", DbType="Int NOT NULL")]
		public int Won
		{
			get
			{
				return this._Won;
			}
			set
			{
				if ((this._Won != value))
				{
					this.OnWonChanging(value);
					this.SendPropertyChanging();
					this._Won = value;
					this.SendPropertyChanged("Won");
					this.OnWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Draw", DbType="Int NOT NULL")]
		public int Draw
		{
			get
			{
				return this._Draw;
			}
			set
			{
				if ((this._Draw != value))
				{
					this.OnDrawChanging(value);
					this.SendPropertyChanging();
					this._Draw = value;
					this.SendPropertyChanged("Draw");
					this.OnDrawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lost", DbType="Int NOT NULL")]
		public int Lost
		{
			get
			{
				return this._Lost;
			}
			set
			{
				if ((this._Lost != value))
				{
					this.OnLostChanging(value);
					this.SendPropertyChanging();
					this._Lost = value;
					this.SendPropertyChanged("Lost");
					this.OnLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PtsFor", DbType="Int NOT NULL")]
		public int PtsFor
		{
			get
			{
				return this._PtsFor;
			}
			set
			{
				if ((this._PtsFor != value))
				{
					this.OnPtsForChanging(value);
					this.SendPropertyChanging();
					this._PtsFor = value;
					this.SendPropertyChanged("PtsFor");
					this.OnPtsForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PtsAgainst", DbType="Int NOT NULL")]
		public int PtsAgainst
		{
			get
			{
				return this._PtsAgainst;
			}
			set
			{
				if ((this._PtsAgainst != value))
				{
					this.OnPtsAgainstChanging(value);
					this.SendPropertyChanging();
					this._PtsAgainst = value;
					this.SendPropertyChanged("PtsAgainst");
					this.OnPtsAgainstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PtsGoalDiff", DbType="Int NOT NULL")]
		public int PtsGoalDiff
		{
			get
			{
				return this._PtsGoalDiff;
			}
			set
			{
				if ((this._PtsGoalDiff != value))
				{
					this.OnPtsGoalDiffChanging(value);
					this.SendPropertyChanging();
					this._PtsGoalDiff = value;
					this.SendPropertyChanged("PtsGoalDiff");
					this.OnPtsGoalDiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pts", DbType="Int NOT NULL")]
		public int Pts
		{
			get
			{
				return this._Pts;
			}
			set
			{
				if ((this._Pts != value))
				{
					this.OnPtsChanging(value);
					this.SendPropertyChanging();
					this._Pts = value;
					this.SendPropertyChanged("Pts");
					this.OnPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankingPosition", DbType="Int NOT NULL")]
		public int RankingPosition
		{
			get
			{
				return this._RankingPosition;
			}
			set
			{
				if ((this._RankingPosition != value))
				{
					this.OnRankingPositionChanging(value);
					this.SendPropertyChanging();
					this._RankingPosition = value;
					this.SendPropertyChanged("RankingPosition");
					this.OnRankingPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueTbl_FixturesMatchesTbl", Storage="_FixturesMatchesTbls", ThisKey="LeagueID", OtherKey="LeagueID")]
		public EntitySet<FixturesMatchesTbl> FixturesMatchesTbls
		{
			get
			{
				return this._FixturesMatchesTbls;
			}
			set
			{
				this._FixturesMatchesTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamTbl_LeagueTbl", Storage="_TeamTbl", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public TeamTbl TeamTbl
		{
			get
			{
				return this._TeamTbl.Entity;
			}
			set
			{
				TeamTbl previousValue = this._TeamTbl.Entity;
				if (((previousValue != value) 
							|| (this._TeamTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamTbl.Entity = null;
						previousValue.LeagueTbls.Remove(this);
					}
					this._TeamTbl.Entity = value;
					if ((value != null))
					{
						value.LeagueTbls.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("TeamTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FixturesMatchesTbls(FixturesMatchesTbl entity)
		{
			this.SendPropertyChanging();
			entity.LeagueTbl = this;
		}
		
		private void detach_FixturesMatchesTbls(FixturesMatchesTbl entity)
		{
			this.SendPropertyChanging();
			entity.LeagueTbl = null;
		}
	}
}
#pragma warning restore 1591
